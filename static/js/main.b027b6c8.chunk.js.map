{"version":3,"sources":["components/InputField.tsx","components/SingleTodo.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputField","todo","setTodo","handleAdd","className","onSubmit","type","value","onChange","e","target","placeholder","SingleTodo","todos","setTodos","TodoList","map","id","App","useState","console","log","preventDefault","Date","now","isDOne","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOA2BeA,EAjBqB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAAUC,EAAe,EAAfA,UACrD,OACE,uBAAMC,UAAU,QAAQC,SAAUF,EAAlC,UACE,uBACEG,KAAK,QACLC,MAAON,EACPO,SAAU,SAACC,GAAD,OAAOP,EAAQO,EAAEC,OAAOH,QAClCI,YAAY,kBACZP,UAAU,cAEZ,wBAAQA,UAAU,eAAeE,KAAK,SAAtC,qB,eC2BSM,EA7BqB,SAAC,GAA6B,IAA5BX,EAA2B,EAA3BA,KAA2B,EAArBY,MAAqB,EAAdC,SAC/C,OACI,uBAAMV,UAAU,eAAhB,UACI,sBAAMA,UAAU,qBAAhB,SAAsCH,EAAKA,OAE3C,gCAEI,sBAAMG,UAAU,OAAhB,SACA,cAAC,IAAD,MAGA,sBAAMA,UAAU,OAAhB,SAEA,cAAC,IAAD,MAEA,sBAAMA,UAAU,OAAhB,SAEG,cAAC,IAAD,aCXJW,EAfmB,SAAC,GAAyB,IAAvBF,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC1C,OACE,8BACGD,EAAMG,KAAI,SAACf,GAAD,OACT,cAAC,EAAD,CACEA,KAAMA,EAENa,SAAUA,EACVD,MAAOA,GAFFZ,EAAKgB,UCeLC,EAxBO,WACpB,MAAwBC,mBAAiB,IAAzC,mBAAOlB,EAAP,KAAaC,EAAb,KACA,EAA0BiB,mBAAiB,IAA3C,mBAAON,EAAP,KAAcC,EAAd,KAYA,OADEM,QAAQC,IAAIR,GAEZ,sBAAKT,UAAU,MAAf,UACE,sBAAMA,UAAU,UAAhB,qBACA,cAAC,EAAD,CAAYH,KAAMA,EAAMC,QAASA,EAASC,UAb5B,SAACM,GACjBA,EAAEa,iBAEErB,IACFa,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEI,GAAIM,KAAKC,MAAOvB,KAAMA,EAAMwB,QAAQ,MAC1DvB,EAAQ,QASR,cAAC,EAAD,CAAUW,MAAQA,EAAOC,SAAWA,QCV3BY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b027b6c8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./inputStyle.css\";\r\n\r\ninterface Props {\r\n  todo: string;\r\n  setTodo: React.Dispatch<React.SetStateAction<string>>;\r\n  handleAdd :(e:React.FormEvent) => void\r\n}\r\n\r\nconst InputField: React.FC<Props> = ({ todo, setTodo , handleAdd}) => {\r\n  return (\r\n    <form className=\"input\" onSubmit={handleAdd}>\r\n      <input\r\n        type=\"input\"\r\n        value={todo}\r\n        onChange={(e) => setTodo(e.target.value)}\r\n        placeholder=\"Enter your task\"\r\n        className=\"input_box\"\r\n      />\r\n      <button className=\"input_submit\" type=\"submit\">\r\n        Go!\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","\r\nimport React from 'react'\r\n\r\nimport { Todo } from \"../model\";\r\nimport {AiFillEdit , AiFillDelete } from 'react-icons/ai'\r\nimport {MdDone} from 'react-icons/md'\r\n\r\nimport \"./inputStyle.css\";\r\n\r\n\r\ninterface Props{\r\n\r\n    todo :Todo;\r\n    todos: Todo[];\r\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\r\n\r\n    \r\n}\r\nconst SingleTodo :React.FC<Props> = ({todo, todos, setTodos}) => {\r\n    return (\r\n        <form className='todos_single'>\r\n            <span className=\"todos_single--text\">{todo.todo}</span>\r\n\r\n            <div>\r\n\r\n                <span className=\"icon\">\r\n                <AiFillEdit/>\r\n\r\n                </span>\r\n                <span className=\"icon\">\r\n\r\n                <AiFillDelete/>\r\n                </span>\r\n                <span className=\"icon\">\r\n                   \r\n                   <MdDone/>\r\n                </span>\r\n            </div>\r\n\r\n\r\n\r\n        </form>\r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport default SingleTodo\r\n","import React from \"react\";\r\nimport { Todo } from \"../model\";\r\nimport SingleTodo from \"./SingleTodo\";\r\nimport \"./inputStyle.css\";\r\n\r\ninterface Props {\r\n  todos: Todo[];\r\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\r\n}\r\nconst TodoList: React.FC<Props> = ({ todos, setTodos }) => {\r\n  return (\r\n    <div>\r\n      {todos.map((todo) => (\r\n        <SingleTodo\r\n          todo={todo}\r\n          key={todo.id}\r\n          setTodos={setTodos}\r\n          todos={todos}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport InputField from \"./components/InputField\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport { Todo } from \"./model\";\r\n\r\nconst App: React.FC = () => {\r\n  const [todo, setTodo] = useState<string>(\"\");\r\n  const [todos, setTodos] = useState<Todo[]>([]);\r\n\r\n  const handleAdd = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (todo) {\r\n      setTodos([...todos, { id: Date.now(), todo: todo, isDOne: false }]);\r\n      setTodo(\"\");\r\n    }\r\n  };\r\n\r\n    console.log(todos)\r\n  return (\r\n    <div className=\"App\">\r\n      <span className=\"heading\">Taskify</span>\r\n      <InputField todo={todo} setTodo={setTodo} handleAdd={handleAdd} />\r\n      <TodoList todos ={todos} setTodos= {setTodos}/>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}